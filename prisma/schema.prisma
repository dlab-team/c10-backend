generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model active_visa {
  id                  BigInt                @id(map: "active_visa_pk") @default(autoincrement())
  country             String                @db.VarChar(18)
  profile_active_visa profile_active_visa[]
}

model availability {
  id                      BigInt                    @id(map: "availability_pk") @default(autoincrement())
  availability            String                    @db.VarChar(10)
  profile_to_availability profile_to_availability[]
}

model better_current_situation {
  id                        BigInt                      @id(map: "better_current_situation_pk") @default(autoincrement())
  situation                 String                      @db.VarChar
  profile_current_situation profile_current_situation[]
}

model companies {
  id                    BigInt                  @id(map: "companies_pk") @default(autoincrement())
  first_name            String                  @db.VarChar(20)
  last_name             String                  @db.VarChar(20)
  email                 String                  @db.VarChar(30)
  phone_number          String                  @db.VarChar(12)
  company               String                  @db.VarChar(40)
  questions             String?
  companies_to_position companies_to_position[]
}

model companies_to_position {
  id                 BigInt          @id(map: "companies_to_position_pk") @default(autoincrement())
  id_companies       BigInt
  id_target_position BigInt
  companies          companies       @relation(fields: [id_companies], references: [id], map: "companies_fk")
  target_position    target_position @relation(fields: [id_target_position], references: [id], map: "target_position_fk")
}

model current_job_status {
  id           BigInt         @id(map: "current_job_status_pk") @default(autoincrement())
  state        String         @db.VarChar
  user_profile user_profile[]
}

model education_received {
  id               BigInt       @id(map: "education_received_pk") @default(autoincrement())
  career           String       @db.VarChar(80)
  name_institution String       @db.VarChar(60)
  type_institution String       @db.VarChar(60)
  id_user_profile  BigInt
  user_profile     user_profile @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model frameworks_or_batabase {
  id                   BigInt                 @id(map: "frameworks_or_batabase_pk") @default(autoincrement())
  technology_name      String                 @db.VarChar(28)
  technology_expertise technology_expertise[]
  tt_framework_base    tt_framework_base?
}

model profile_active_visa {
  id              BigInt       @id(map: "profile_active_visa_pk") @default(autoincrement())
  id_active_visa  BigInt
  id_user_profile BigInt
  active_visa     active_visa  @relation(fields: [id_active_visa], references: [id], map: "active_visa_fk")
  user_profile    user_profile @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model profile_current_situation {
  id                          BigInt                   @id(map: "profile_current_situation_pk") @default(autoincrement())
  id_better_current_situation BigInt
  id_user_profile             BigInt                   @unique(map: "profile_current_situation_uq")
  better_current_situation    better_current_situation @relation(fields: [id_better_current_situation], references: [id], map: "better_current_situation_fk")
  user_profile                user_profile             @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model profile_to_availability {
  id              BigInt       @id(map: "profile_to_availability_pk") @default(autoincrement())
  id_availability BigInt
  id_user_profile BigInt
  availability    availability @relation(fields: [id_availability], references: [id], map: "availability_fk")
  user_profile    user_profile @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model profile_to_soft_skill {
  id              BigInt       @id(map: "profile_to_soft_skill_pk") @default(autoincrement())
  id_soft_skills  BigInt
  id_user_profile BigInt
  soft_skills     soft_skills  @relation(fields: [id_soft_skills], references: [id], map: "soft_skills_fk")
  user_profile    user_profile @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model profile_to_years_exp {
  id                  BigInt           @id(map: "profile_to_years_exp_pk") @default(autoincrement())
  id_years_experience BigInt
  id_user_profile     BigInt           @unique(map: "profile_to_years_exp_uq")
  user_profile        user_profile     @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
  years_experience    years_experience @relation(fields: [id_years_experience], references: [id], map: "years_experience_fk")
}

model programming_language {
  id                   BigInt                 @id(map: "programming_language_pk") @default(autoincrement())
  language             String                 @db.VarChar(28)
  technology_expertise technology_expertise[]
  tt_pro_language      tt_pro_language?
}

model soft_skills {
  id                    BigInt                  @id(map: "soft_skills_pk") @default(autoincrement())
  skill                 String                  @db.VarChar(28)
  profile_to_soft_skill profile_to_soft_skill[]
}

model target_position {
  id                    BigInt                  @id(map: "target_position_pk") @default(autoincrement())
  position              String                  @db.VarChar(60)
  companies_to_position companies_to_position[]
  user_to_position      user_to_position[]
}

model technical_test_tools {
  id              BigInt       @id(map: "technical_test_tools_pk") @default(autoincrement())
  approved        Boolean?
  score           Int?
  date_completed  DateTime?    @db.Date
  id_tools        BigInt       @unique(map: "technical_test_tools_uq")
  id_user_profile BigInt
  tools           tools        @relation(fields: [id_tools], references: [id], map: "tools_fk")
  user_profile    user_profile @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model technology_expertise {
  id                        BigInt                  @id(map: "technology_expertise_pk") @default(autoincrement())
  level                     Int
  others                    String?
  id_programming_language   BigInt?
  id_frameworks_or_batabase BigInt?
  id_tools                  BigInt?
  id_user_profile           BigInt
  frameworks_or_batabase    frameworks_or_batabase? @relation(fields: [id_frameworks_or_batabase], references: [id], map: "frameworks_or_batabase_fk")
  programming_language      programming_language?   @relation(fields: [id_programming_language], references: [id], map: "programming_language_fk")
  tools                     tools?                  @relation(fields: [id_tools], references: [id], map: "tools_fk")
  user_profile              user_profile            @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model tools {
  id                   BigInt                 @id(map: "tools_pk") @default(autoincrement())
  tool                 String                 @db.VarChar(28)
  technical_test_tools technical_test_tools?
  technology_expertise technology_expertise[]
}

model tt_framework_base {
  id                        BigInt                 @id(map: "tt_framework_base_pk") @default(autoincrement())
  approved                  Boolean?
  score                     Int?
  date_completed            DateTime?              @db.Date
  id_frameworks_or_batabase BigInt                 @unique(map: "tt_framework_base_uq")
  id_user_profile           BigInt
  frameworks_or_batabase    frameworks_or_batabase @relation(fields: [id_frameworks_or_batabase], references: [id], map: "frameworks_or_batabase_fk")
  user_profile              user_profile           @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model tt_pro_language {
  id                      BigInt               @id(map: "technical_test_pro_language_pk") @default(autoincrement())
  approved                Boolean?
  score                   Int?
  date_completed          DateTime?            @db.Date
  id_programming_language BigInt               @unique(map: "tt_pro_language_uq")
  id_user_profile         BigInt
  programming_language    programming_language @relation(fields: [id_programming_language], references: [id], map: "programming_language_fk")
  user_profile            user_profile         @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model user {
  id           BigInt        @id(map: "user_pk") @default(autoincrement())
  first_name   String        @db.VarChar
  last_name    String        @db.VarChar
  email        String        @db.VarChar(30)
  password     String?       @db.VarChar
  id_user_role BigInt
  user_role    user_role     @relation(fields: [id_user_role], references: [id], map: "user_role_fk")
  user_profile user_profile?
}

model user_profile {
  id                        BigInt                     @id(map: "user_profile_pk") @default(autoincrement())
  phone_number              String                     @db.VarChar(12)
  city                      String                     @db.VarChar(20)
  country                   String                     @db.VarChar(18)
  genre                     String                     @db.VarChar(20)
  highest_edu_level         String                     @db.VarChar(20)
  current_edu_status        String                     @db.VarChar(20)
  english_level             String                     @db.VarChar(16)
  url_cv                    String?                    @db.VarChar
  url_linkedin              String?                    @db.VarChar
  url_github                String?                    @db.VarChar
  url_portfolio             String?                    @db.VarChar
  preferred_project         String?
  work_expectation          String?
  id_current_job_status     BigInt
  id_user                   BigInt                     @unique(map: "user_profile_uq")
  education_received        education_received[]
  profile_active_visa       profile_active_visa[]
  profile_current_situation profile_current_situation?
  profile_to_availability   profile_to_availability[]
  profile_to_soft_skill     profile_to_soft_skill[]
  profile_to_years_exp      profile_to_years_exp?
  technical_test_tools      technical_test_tools[]
  technology_expertise      technology_expertise[]
  tt_framework_base         tt_framework_base[]
  tt_pro_language           tt_pro_language[]
  current_job_status        current_job_status         @relation(fields: [id_current_job_status], references: [id], map: "current_job_status_fk")
  user                      user                       @relation(fields: [id_user], references: [id], map: "user_fk")
  user_to_position          user_to_position[]
}

model user_role {
  id   BigInt @id(map: "user_role_pk") @default(autoincrement())
  role String @db.VarChar
  user user[]
}

model user_to_position {
  id                 BigInt          @id(map: "user_to_position_pk") @default(autoincrement())
  id_target_position BigInt
  id_user_profile    BigInt
  target_position    target_position @relation(fields: [id_target_position], references: [id], map: "target_position_fk")
  user_profile       user_profile    @relation(fields: [id_user_profile], references: [id], map: "user_profile_fk")
}

model years_experience {
  id                   BigInt                 @id(map: "years_experience_pk") @default(autoincrement())
  years                String                 @db.VarChar(40)
  profile_to_years_exp profile_to_years_exp[]
}
